// This file is part of "Watt"
// 
// "Watt" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "Watt" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "Watt"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMPackage.m
//  Watt
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMPackage.h" 
#import "WTMCollectionOfActivity.h"
#import "WTMImage.h"
#import "WTMLangDictionary.h"
#import "WTMCollectionOfLibrary.h"
#import "WTMUser.h"
#import "WTMShelf.h"

@implementation WTMPackage 

@synthesize category=_category;
@synthesize comment=_comment;
@synthesize extras=_extras;
@synthesize license=_license;
@synthesize minEngineVersion=_minEngineVersion;
@synthesize name=_name;
@synthesize rights=_rights;
@synthesize shelfIndex=_shelfIndex;
@synthesize activities=_activities;
@synthesize coverPicture=_coverPicture;
@synthesize langDictionary=_langDictionary;
@synthesize libraries=_libraries;
@synthesize owner=_owner;
@synthesize shelf=_shelf;

- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"category"]){
		[super setValue:value forKey:@"category"];
	} else if ([key isEqualToString:@"comment"]) {
		[super setValue:value forKey:@"comment"];
	} else if ([key isEqualToString:@"extras"]) {
		[super setValue:value forKey:@"extras"];
	} else if ([key isEqualToString:@"license"]) {
		[super setValue:value forKey:@"license"];
	} else if ([key isEqualToString:@"minEngineVersion"]) {
		[super setValue:value forKey:@"minEngineVersion"];
	} else if ([key isEqualToString:@"name"]) {
		[super setValue:value forKey:@"name"];
	} else if ([key isEqualToString:@"rights"]) {
		[super setValue:value forKey:@"rights"];
	} else if ([key isEqualToString:@"shelfIndex"]) {
		[super setValue:value forKey:@"shelfIndex"];
	} else if ([key isEqualToString:@"activities"]) {
		[super setValue:[WTMCollectionOfActivity instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"activities"];
	} else if ([key isEqualToString:@"coverPicture"]) {
		[super setValue:[WTMImage instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"coverPicture"];
	} else if ([key isEqualToString:@"langDictionary"]) {
		[super setValue:[WTMLangDictionary instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"langDictionary"];
	} else if ([key isEqualToString:@"libraries"]) {
		[super setValue:[WTMCollectionOfLibrary instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"libraries"];
	} else if ([key isEqualToString:@"owner"]) {
		[super setValue:[WTMUser instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"owner"];
	} else if ([key isEqualToString:@"shelf"]) {
		[super setValue:[WTMShelf instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"shelf"];
	} else {
		[super setValue:value forKey:key];
	}
}


- (WTMCollectionOfActivity*)activities{
	if([_activities isAnAlias]){
		id o=[_registry objectWithUinstID:_activities.uinstID];
		if(o){
			_activities=o;
		}
	}
	return _activities;
}


- (WTMCollectionOfActivity*)activities_auto{
	_activities=[self activities];
	if(!_activities){
		_activities=[[WTMCollectionOfActivity alloc] initInRegistry:_registry];
	}
	return _activities;
}

- (void)setActivities:(WTMCollectionOfActivity*)activities{
	_activities=activities;
}

- (WTMImage*)coverPicture{
	if([_coverPicture isAnAlias]){
		id o=[_registry objectWithUinstID:_coverPicture.uinstID];
		if(o){
			_coverPicture=o;
		}
	}
	return _coverPicture;
}


- (WTMImage*)coverPicture_auto{
	_coverPicture=[self coverPicture];
	if(!_coverPicture){
		_coverPicture=[[WTMImage alloc] initInRegistry:_registry];
	}
	return _coverPicture;
}

- (void)setCoverPicture:(WTMImage*)coverPicture{
	_coverPicture=coverPicture;
}

- (WTMLangDictionary*)langDictionary{
	if([_langDictionary isAnAlias]){
		id o=[_registry objectWithUinstID:_langDictionary.uinstID];
		if(o){
			_langDictionary=o;
		}
	}
	return _langDictionary;
}


- (WTMLangDictionary*)langDictionary_auto{
	_langDictionary=[self langDictionary];
	if(!_langDictionary){
		_langDictionary=[[WTMLangDictionary alloc] initInRegistry:_registry];
	}
	return _langDictionary;
}

- (void)setLangDictionary:(WTMLangDictionary*)langDictionary{
	_langDictionary=langDictionary;
}

- (WTMCollectionOfLibrary*)libraries{
	if([_libraries isAnAlias]){
		id o=[_registry objectWithUinstID:_libraries.uinstID];
		if(o){
			_libraries=o;
		}
	}
	return _libraries;
}


- (WTMCollectionOfLibrary*)libraries_auto{
	_libraries=[self libraries];
	if(!_libraries){
		_libraries=[[WTMCollectionOfLibrary alloc] initInRegistry:_registry];
	}
	return _libraries;
}

- (void)setLibraries:(WTMCollectionOfLibrary*)libraries{
	_libraries=libraries;
}

- (WTMUser*)owner{
	if([_owner isAnAlias]){
		id o=[_registry objectWithUinstID:_owner.uinstID];
		if(o){
			_owner=o;
		}
	}
	return _owner;
}


- (WTMUser*)owner_auto{
	_owner=[self owner];
	if(!_owner){
		_owner=[[WTMUser alloc] initInRegistry:_registry];
	}
	return _owner;
}

- (void)setOwner:(WTMUser*)owner{
	_owner=owner;
}

- (WTMShelf*)shelf{
	if([_shelf isAnAlias]){
		id o=[_registry objectWithUinstID:_shelf.uinstID];
		if(o){
			_shelf=o;
		}
	}
	return _shelf;
}


- (WTMShelf*)shelf_auto{
	_shelf=[self shelf];
	if(!_shelf){
		_shelf=[[WTMShelf alloc] initInRegistry:_registry];
	}
	return _shelf;
}

- (void)setShelf:(WTMShelf*)shelf{
	_shelf=shelf;
}



- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
    if([self isAnAlias])
        return [super aliasDictionaryRepresentation];
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
    NSMutableDictionary *dictionary=[NSMutableDictionary dictionary];
	[dictionary setValue:self.category forKey:@"category"];
	[dictionary setValue:self.comment forKey:@"comment"];
	[dictionary setValue:self.extras forKey:@"extras"];
	[dictionary setValue:self.license forKey:@"license"];
	[dictionary setValue:[NSNumber numberWithFloat:self.minEngineVersion] forKey:@"minEngineVersion"];
	[dictionary setValue:self.name forKey:@"name"];
	[dictionary setValue:self.rights forKey:@"rights"];
	[dictionary setValue:[NSNumber numberWithInteger:self.shelfIndex] forKey:@"shelfIndex"];
	if(self.activities){
		if(includeChildren){
			[dictionary setValue:[self.activities dictionaryRepresentationWithChildren:includeChildren] forKey:@"activities"];
		}else{
			[dictionary setValue:[self.activities aliasDictionaryRepresentation] forKey:@"activities"];
		}
	}
	if(self.coverPicture){
		if(includeChildren){
			[dictionary setValue:[self.coverPicture dictionaryRepresentationWithChildren:includeChildren] forKey:@"coverPicture"];
		}else{
			[dictionary setValue:[self.coverPicture aliasDictionaryRepresentation] forKey:@"coverPicture"];
		}
	}
	if(self.langDictionary){
		if(includeChildren){
			[dictionary setValue:[self.langDictionary dictionaryRepresentationWithChildren:includeChildren] forKey:@"langDictionary"];
		}else{
			[dictionary setValue:[self.langDictionary aliasDictionaryRepresentation] forKey:@"langDictionary"];
		}
	}
	if(self.libraries){
		if(includeChildren){
			[dictionary setValue:[self.libraries dictionaryRepresentationWithChildren:includeChildren] forKey:@"libraries"];
		}else{
			[dictionary setValue:[self.libraries aliasDictionaryRepresentation] forKey:@"libraries"];
		}
	}
	if(self.owner){
		if(includeChildren){
			[dictionary setValue:[self.owner dictionaryRepresentationWithChildren:includeChildren] forKey:@"owner"];
		}else{
			[dictionary setValue:[self.owner aliasDictionaryRepresentation] forKey:@"owner"];
		}
	}
	if(self.shelf){
		if(includeChildren){
			[dictionary setValue:[self.shelf dictionaryRepresentationWithChildren:includeChildren] forKey:@"shelf"];
		}else{
			[dictionary setValue:[self.shelf aliasDictionaryRepresentation] forKey:@"shelf"];
		}
	}
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:dictionary forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
	NSMutableString *s=[NSMutableString string];
	[s appendFormat:@"Instance of %@ :\n",NSStringFromClass([self class])];
	[s appendFormat:@"category : %@\n",self.category];
	[s appendFormat:@"comment : %@\n",self.comment];
	[s appendFormat:@"extras : %@\n",self.extras];
	[s appendFormat:@"license : %@\n",self.license];
	[s appendFormat:@"minEngineVersion : %@\n",[NSNumber numberWithFloat:self.minEngineVersion]];
	[s appendFormat:@"name : %@\n",self.name];
	[s appendFormat:@"rights : %@\n",self.rights];
	[s appendFormat:@"shelfIndex : %@\n",[NSNumber numberWithInteger:self.shelfIndex]];
	[s appendFormat:@"activities : %@\n",NSStringFromClass([self.activities class])];
	[s appendFormat:@"coverPicture : %@\n",NSStringFromClass([self.coverPicture class])];
	[s appendFormat:@"langDictionary : %@\n",NSStringFromClass([self.langDictionary class])];
	[s appendFormat:@"libraries : %@\n",NSStringFromClass([self.libraries class])];
	[s appendFormat:@"owner : %@\n",NSStringFromClass([self.owner class])];
	[s appendFormat:@"shelf : %@\n",NSStringFromClass([self.shelf class])];
	return s;
}

@end
