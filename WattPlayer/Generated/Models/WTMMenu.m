// This file is part of "Watt"
// 
// "Watt" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "Watt" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "Watt"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMMenu.m
//  Watt
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMMenu.h" 
#import "WTMMenu.h"

@implementation WTMMenu 

@synthesize details=_details;
@synthesize extras=_extras;
@synthesize label=_label;
@synthesize parentMenu=_parentMenu;

- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"details"]){
		[super setValue:value forKey:@"details"];
	} else if ([key isEqualToString:@"extras"]) {
		[super setValue:value forKey:@"extras"];
	} else if ([key isEqualToString:@"label"]) {
		[super setValue:value forKey:@"label"];
	} else if ([key isEqualToString:@"parentMenu"]) {
		[super setValue:[WTMMenu instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"parentMenu"];
	} else {
		[super setValue:value forKey:key];
	}
}


- (WTMMenu*)parentMenu{
	if([_parentMenu isAnAlias]){
		id o=[_registry objectWithUinstID:_parentMenu.uinstID];
		if(o){
			_parentMenu=o;
		}
	}
	return _parentMenu;
}


- (WTMMenu*)parentMenu_auto{
	_parentMenu=[self parentMenu];
	if(!_parentMenu){
		_parentMenu=[[WTMMenu alloc] initInRegistry:_registry];
	}
	return _parentMenu;
}

- (void)setParentMenu:(WTMMenu*)parentMenu{
	_parentMenu=parentMenu;
}



- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
    if([self isAnAlias])
        return [super aliasDictionaryRepresentation];
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
    NSMutableDictionary *dictionary=[NSMutableDictionary dictionary];
	[dictionary setValue:self.details forKey:@"details"];
	[dictionary setValue:self.extras forKey:@"extras"];
	[dictionary setValue:self.label forKey:@"label"];
	if(self.parentMenu){
		if(includeChildren){
			[dictionary setValue:[self.parentMenu dictionaryRepresentationWithChildren:includeChildren] forKey:@"parentMenu"];
		}else{
			[dictionary setValue:[self.parentMenu aliasDictionaryRepresentation] forKey:@"parentMenu"];
		}
	}
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:dictionary forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
	NSMutableString *s=[NSMutableString string];
	[s appendFormat:@"Instance of %@ :\n",NSStringFromClass([self class])];
	[s appendFormat:@"details : %@\n",self.details];
	[s appendFormat:@"extras : %@\n",self.extras];
	[s appendFormat:@"label : %@\n",self.label];
	[s appendFormat:@"parentMenu : %@\n",NSStringFromClass([self.parentMenu class])];
	return s;
}

@end
