// This file is part of "WTM"
// 
// "WTM" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "WTM" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "WTM"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMMenuSection.m
//  WTM
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMMenuSection.h" 
#import "WTMCollectionOfMenu.h"
#import "WTMShelf.h"

@implementation WTMMenuSection 

@synthesize details=_details;
@synthesize index=_index;
@synthesize label=_label;
@synthesize menus=_menus;
@synthesize shelf=_shelf;


#pragma  mark WattCopying

- (instancetype)wattCopyInRegistry:(WattRegistry*)destinationRegistry{
	WTMMenuSection *instance=[super wattCopyInRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_details=[_details copy];
	instance->_index=_index;
	instance->_label=[_label copy];
	instance->_menus=[_menus instancebyCopyTo:destinationRegistry];
	instance->_shelf=[_shelf instancebyCopyTo:destinationRegistry];
    return instance;
}

#pragma  mark WattExtraction

- (instancetype)wattExtractAndCopyToRegistry:(WattRegistry*)destinationRegistry{
	WTMMenuSection *instance=[super wattExtractAndCopyToRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_details=[_details copy];
	instance->_index=_index;
	instance->_label=[_label copy];
	instance->_menus=[_menus extractInstancebyCopyTo:destinationRegistry];
	instance->_shelf=nil;// Non extractible
    return instance;
}




#pragma mark -


- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"a"]){
		[super setValue:value forKey:@"a"];
	} else if ([key isEqualToString:@"b"]) {
		[super setValue:value forKey:@"b"];
	} else if ([key isEqualToString:@"c"]) {
		[super setValue:value forKey:@"c"];
	} else if ([key isEqualToString:@"d"]) {
		[super setValue:[WTMCollectionOfMenu instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"d"];
	} else if ([key isEqualToString:@"e"]) {
		[super setValue:[WTMShelf instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"e"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WTMCollectionOfMenu*)menus{
	if([_menus isAnAlias]){
		id o=[_registry objectWithUinstID:_menus.uinstID];
		if(o){
			_menus=o;
		}
	}
	return _menus;
}


- (WTMCollectionOfMenu*)menus_auto{
	_menus=[self menus];
	if(!_menus){
		_menus=[[WTMCollectionOfMenu alloc] initInRegistry:_registry];
	}
	return _menus;
}

- (void)setMenus:(WTMCollectionOfMenu*)menus{
	_menus=menus;
}

- (WTMShelf*)shelf{
	if([_shelf isAnAlias]){
		id o=[_registry objectWithUinstID:_shelf.uinstID];
		if(o){
			_shelf=o;
		}
	}
	return _shelf;
}


- (WTMShelf*)shelf_auto{
	_shelf=[self shelf];
	if(!_shelf){
		_shelf=[[WTMShelf alloc] initInRegistry:_registry];
	}
	return _shelf;
}

- (void)setShelf:(WTMShelf*)shelf{
	_shelf=shelf;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	if(self.details){
		[dictionary setValue:self.details forKey:@"a"];
	}
	[dictionary setValue:@(self.index) forKey:@"b"];
	if(self.label){
		[dictionary setValue:self.label forKey:@"c"];
	}
	if(self.menus){
		if(includeChildren){
			[dictionary setValue:[self.menus dictionaryRepresentationWithChildren:includeChildren] forKey:@"d"];
		}else{
			[dictionary setValue:[self.menus aliasDictionaryRepresentation] forKey:@"d"];
		}
	}
	if(self.shelf){
		if(includeChildren){
			[dictionary setValue:[self.shelf dictionaryRepresentationWithChildren:includeChildren] forKey:@"e"];
		}else{
			[dictionary setValue:[self.shelf aliasDictionaryRepresentation] forKey:@"e"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%i) :\n",@"WTMMenuSection ",self.uinstID];
	[s appendFormat:@"details : %@\n",self.details];
	[s appendFormat:@"index : %@\n",@(self.index)];
	[s appendFormat:@"label : %@\n",self.label];
	[s appendFormat:@"menus : %@\n",NSStringFromClass([self.menus class])];
	[s appendFormat:@"shelf : %@\n",NSStringFromClass([self.shelf class])];
	return s;
}

@end
