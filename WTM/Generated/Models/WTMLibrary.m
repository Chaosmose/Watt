// This file is part of "WTM"
// 
// "WTM" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "WTM" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "WTM"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMLibrary.m
//  WTM
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMLibrary.h" 
#import "WTMCollectionOfMember.h"
#import "WTMPackage.h"

@implementation WTMLibrary 

@synthesize name=_name;
@synthesize members=_members;
@synthesize package=_package;


#pragma  mark WattCopying

- (instancetype)wattCopyInRegistry:(WattRegistry*)destinationRegistry{
	WTMLibrary *instance=[super wattCopyInRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_name=[_name copy];
	instance->_members=[_members instancebyCopyTo:destinationRegistry];
	instance->_package=[_package instancebyCopyTo:destinationRegistry];
    return instance;
}

#pragma  mark WattExtraction

- (instancetype)wattExtractAndCopyToRegistry:(WattRegistry*)destinationRegistry{
	WTMLibrary *instance=[super wattExtractAndCopyToRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_name=[_name copy];
	instance->_members=[_members extractInstancebyCopyTo:destinationRegistry];
	instance->_package=nil;// Non extractible
    return instance;
}




#pragma mark -


- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"a"]){
		[super setValue:value forKey:@"a"];
	} else if ([key isEqualToString:@"b"]) {
		[super setValue:[WTMCollectionOfMember instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"b"];
	} else if ([key isEqualToString:@"c"]) {
		[super setValue:[WTMPackage instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"c"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WTMCollectionOfMember*)members{
	if([_members isAnAlias]){
		id o=[_registry objectWithUinstID:_members.uinstID];
		if(o){
			_members=o;
		}
	}
	return _members;
}


- (WTMCollectionOfMember*)members_auto{
	_members=[self members];
	if(!_members){
		_members=[[WTMCollectionOfMember alloc] initInRegistry:_registry];
	}
	return _members;
}

- (void)setMembers:(WTMCollectionOfMember*)members{
	_members=members;
}

- (WTMPackage*)package{
	if([_package isAnAlias]){
		id o=[_registry objectWithUinstID:_package.uinstID];
		if(o){
			_package=o;
		}
	}
	return _package;
}


- (WTMPackage*)package_auto{
	_package=[self package];
	if(!_package){
		_package=[[WTMPackage alloc] initInRegistry:_registry];
	}
	return _package;
}

- (void)setPackage:(WTMPackage*)package{
	_package=package;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	if(self.name){
		[dictionary setValue:self.name forKey:@"a"];
	}
	if(self.members){
		if(includeChildren){
			[dictionary setValue:[self.members dictionaryRepresentationWithChildren:includeChildren] forKey:@"b"];
		}else{
			[dictionary setValue:[self.members aliasDictionaryRepresentation] forKey:@"b"];
		}
	}
	if(self.package){
		if(includeChildren){
			[dictionary setValue:[self.package dictionaryRepresentationWithChildren:includeChildren] forKey:@"c"];
		}else{
			[dictionary setValue:[self.package aliasDictionaryRepresentation] forKey:@"c"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%i) :\n",@"WTMLibrary ",self.uinstID];
	[s appendFormat:@"name : %@\n",self.name];
	[s appendFormat:@"members : %@\n",NSStringFromClass([self.members class])];
	[s appendFormat:@"package : %@\n",NSStringFromClass([self.package class])];
	return s;
}

@end
