// This file is part of "WTM"
// 
// "WTM" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "WTM" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "WTM"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMShelf.m
//  WTM
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMShelf.h" 
#import "WattCollectionOfGroup.h"
#import "WattCollectionOfUser.h"
#import "WTMCollectionOfMenuSection.h"

@implementation WTMShelf 

@synthesize groups=_groups;
@synthesize name=_name;
@synthesize users=_users;
@synthesize sections=_sections;

- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"groups"]){
		[super setValue:[WattCollectionOfGroup instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"groups"];
	} else if ([key isEqualToString:@"name"]) {
		[super setValue:value forKey:@"name"];
	} else if ([key isEqualToString:@"users"]) {
		[super setValue:[WattCollectionOfUser instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"users"];
	} else if ([key isEqualToString:@"sections"]) {
		[super setValue:[WTMCollectionOfMenuSection instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"sections"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WattCollectionOfGroup*)groups{
	if([_groups isAnAlias]){
		id o=[_registry objectWithUinstID:_groups.uinstID];
		if(o){
			_groups=o;
		}
	}
	return _groups;
}


- (WattCollectionOfGroup*)groups_auto{
	_groups=[self groups];
	if(!_groups){
		_groups=[[WattCollectionOfGroup alloc] initInRegistry:_registry];
	}
	return _groups;
}

- (void)setGroups:(WattCollectionOfGroup*)groups{
	_groups=groups;
}

- (WattCollectionOfUser*)users{
	if([_users isAnAlias]){
		id o=[_registry objectWithUinstID:_users.uinstID];
		if(o){
			_users=o;
		}
	}
	return _users;
}


- (WattCollectionOfUser*)users_auto{
	_users=[self users];
	if(!_users){
		_users=[[WattCollectionOfUser alloc] initInRegistry:_registry];
	}
	return _users;
}

- (void)setUsers:(WattCollectionOfUser*)users{
	_users=users;
}

- (WTMCollectionOfMenuSection*)sections{
	if([_sections isAnAlias]){
		id o=[_registry objectWithUinstID:_sections.uinstID];
		if(o){
			_sections=o;
		}
	}
	return _sections;
}


- (WTMCollectionOfMenuSection*)sections_auto{
	_sections=[self sections];
	if(!_sections){
		_sections=[[WTMCollectionOfMenuSection alloc] initInRegistry:_registry];
	}
	return _sections;
}

- (void)setSections:(WTMCollectionOfMenuSection*)sections{
	_sections=sections;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	if(_groups){
		if(includeChildren){
			[dictionary setValue:[self.groups dictionaryRepresentationWithChildren:includeChildren] forKey:@"groups"];
		}else{
			[dictionary setValue:[self.groups aliasDictionaryRepresentation] forKey:@"groups"];
		}
	}
	if(_name){
		[dictionary setValue:self.name forKey:@"name"];
	}
	if(_users){
		if(includeChildren){
			[dictionary setValue:[self.users dictionaryRepresentationWithChildren:includeChildren] forKey:@"users"];
		}else{
			[dictionary setValue:[self.users aliasDictionaryRepresentation] forKey:@"users"];
		}
	}
	if(_sections){
		if(includeChildren){
			[dictionary setValue:[self.sections dictionaryRepresentationWithChildren:includeChildren] forKey:@"sections"];
		}else{
			[dictionary setValue:[self.sections aliasDictionaryRepresentation] forKey:@"sections"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%@.%@) :\n",@"WTMShelf ",_registry.uidString,@(_uinstID)];
	[s appendFormat:@"groups : %@\n",NSStringFromClass([self.groups class])];
	[s appendFormat:@"name : %@\n",self.name];
	[s appendFormat:@"users : %@\n",NSStringFromClass([self.users class])];
	[s appendFormat:@"sections : %@\n",NSStringFromClass([self.sections class])];
	return s;
}

@end
