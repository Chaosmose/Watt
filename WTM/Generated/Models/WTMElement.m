// This file is part of "WTM"
// 
// "WTM" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "WTM" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "WTM"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMElement.m
//  WTM
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMElement.h" 
#import "WTMAsset.h"
#import "WTMCollectionOfBehavior.h"
#import "WTMCollectionOfCell.h"
#import "WTMScene.h"

@implementation WTMElement 

@synthesize asset=_asset;
@synthesize behaviors=_behaviors;
@synthesize cells=_cells;
@synthesize scene=_scene;


#pragma  mark WattCopying

- (instancetype)wattCopyInRegistry:(WattRegistry*)registry{
    WTMElement *instance=[self copy];
    [registry addObject:instance];
    return instance;
}


// NSCopying
- (id)copyWithZone:(NSZone *)zone{
    WTMElement *instance=[[[super class] allocWithZone:zone] init];
    	instance->_registry=nil; // We want to furnish a registry free copy
		// we do not provide an _uinstID
   			instance->_asset=[_asset copyWithZone:zone];
		instance->_behaviors=[_behaviors copyWithZone:zone];
		instance->_cells=[_cells copyWithZone:zone];
		instance->_scene=[_scene copyWithZone:zone];
    return instance;
}

#pragma mark -


- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"asset"]){
		[super setValue:[WTMAsset instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"asset"];
	} else if ([key isEqualToString:@"behaviors"]) {
		[super setValue:[WTMCollectionOfBehavior instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"behaviors"];
	} else if ([key isEqualToString:@"cells"]) {
		[super setValue:[WTMCollectionOfCell instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"cells"];
	} else if ([key isEqualToString:@"scene"]) {
		[super setValue:[WTMScene instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"scene"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WTMAsset*)asset{
	if([_asset isAnAlias]){
		id o=[_registry objectWithUinstID:_asset.uinstID];
		if(o){
			_asset=o;
		}
	}
	return _asset;
}


- (WTMAsset*)asset_auto{
	_asset=[self asset];
	if(!_asset){
		_asset=[[WTMAsset alloc] initInRegistry:_registry];
	}
	return _asset;
}

- (void)setAsset:(WTMAsset*)asset{
	_asset=asset;
}

- (WTMCollectionOfBehavior*)behaviors{
	if([_behaviors isAnAlias]){
		id o=[_registry objectWithUinstID:_behaviors.uinstID];
		if(o){
			_behaviors=o;
		}
	}
	return _behaviors;
}


- (WTMCollectionOfBehavior*)behaviors_auto{
	_behaviors=[self behaviors];
	if(!_behaviors){
		_behaviors=[[WTMCollectionOfBehavior alloc] initInRegistry:_registry];
	}
	return _behaviors;
}

- (void)setBehaviors:(WTMCollectionOfBehavior*)behaviors{
	_behaviors=behaviors;
}

- (WTMCollectionOfCell*)cells{
	if([_cells isAnAlias]){
		id o=[_registry objectWithUinstID:_cells.uinstID];
		if(o){
			_cells=o;
		}
	}
	return _cells;
}


- (WTMCollectionOfCell*)cells_auto{
	_cells=[self cells];
	if(!_cells){
		_cells=[[WTMCollectionOfCell alloc] initInRegistry:_registry];
	}
	return _cells;
}

- (void)setCells:(WTMCollectionOfCell*)cells{
	_cells=cells;
}

- (WTMScene*)scene{
	if([_scene isAnAlias]){
		id o=[_registry objectWithUinstID:_scene.uinstID];
		if(o){
			_scene=o;
		}
	}
	return _scene;
}


- (WTMScene*)scene_auto{
	_scene=[self scene];
	if(!_scene){
		_scene=[[WTMScene alloc] initInRegistry:_registry];
	}
	return _scene;
}

- (void)setScene:(WTMScene*)scene{
	_scene=scene;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	if(self.asset){
		if(includeChildren){
			[dictionary setValue:[self.asset dictionaryRepresentationWithChildren:includeChildren] forKey:@"asset"];
		}else{
			[dictionary setValue:[self.asset aliasDictionaryRepresentation] forKey:@"asset"];
		}
	}
	if(self.behaviors){
		if(includeChildren){
			[dictionary setValue:[self.behaviors dictionaryRepresentationWithChildren:includeChildren] forKey:@"behaviors"];
		}else{
			[dictionary setValue:[self.behaviors aliasDictionaryRepresentation] forKey:@"behaviors"];
		}
	}
	if(self.cells){
		if(includeChildren){
			[dictionary setValue:[self.cells dictionaryRepresentationWithChildren:includeChildren] forKey:@"cells"];
		}else{
			[dictionary setValue:[self.cells aliasDictionaryRepresentation] forKey:@"cells"];
		}
	}
	if(self.scene){
		if(includeChildren){
			[dictionary setValue:[self.scene dictionaryRepresentationWithChildren:includeChildren] forKey:@"scene"];
		}else{
			[dictionary setValue:[self.scene aliasDictionaryRepresentation] forKey:@"scene"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%i) :\n",@"WTMElement ",self.uinstID];
	[s appendFormat:@"asset : %@\n",NSStringFromClass([self.asset class])];
	[s appendFormat:@"behaviors : %@\n",NSStringFromClass([self.behaviors class])];
	[s appendFormat:@"cells : %@\n",NSStringFromClass([self.cells class])];
	[s appendFormat:@"scene : %@\n",NSStringFromClass([self.scene class])];
	return s;
}

@end
