// This file is part of "Watt"
// 
// "Watt" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "Watt" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "Watt"  If not, see <http://www.gnu.org/licenses/>
// 
//  WTMModel.m
//  Watt
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WTMModel.h" 
#import "WTMGroup.h"
#import "WTMUser.h"

@implementation WTMModel 

@synthesize category=_category;
@synthesize comment=_comment;
@synthesize extras=_extras;
@synthesize objectName=_objectName;
@synthesize rights=_rights;
@synthesize group=_group;
@synthesize owner=_owner;

- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"category"]){
		[super setValue:value forKey:@"category"];
	} else if ([key isEqualToString:@"comment"]) {
		[super setValue:value forKey:@"comment"];
	} else if ([key isEqualToString:@"extras"]) {
		[super setValue:value forKey:@"extras"];
	} else if ([key isEqualToString:@"objectName"]) {
		[super setValue:value forKey:@"objectName"];
	} else if ([key isEqualToString:@"rights"]) {
		[super setValue:value forKey:@"rights"];
	} else if ([key isEqualToString:@"group"]) {
		[super setValue:[WTMGroup instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"group"];
	} else if ([key isEqualToString:@"owner"]) {
		[super setValue:[WTMUser instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"owner"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WTMGroup*)group{
	if([_group isAnAlias]){
		id o=[_registry objectWithUinstID:_group.uinstID];
		if(o){
			_group=o;
		}
	}
	return _group;
}


- (WTMGroup*)group_auto{
	_group=[self group];
	if(!_group){
		_group=[[WTMGroup alloc] initInRegistry:_registry];
	}
	return _group;
}

- (void)setGroup:(WTMGroup*)group{
	_group=group;
}

- (WTMUser*)owner{
	if([_owner isAnAlias]){
		id o=[_registry objectWithUinstID:_owner.uinstID];
		if(o){
			_owner=o;
		}
	}
	return _owner;
}


- (WTMUser*)owner_auto{
	_owner=[self owner];
	if(!_owner){
		_owner=[[WTMUser alloc] initInRegistry:_registry];
	}
	return _owner;
}

- (void)setOwner:(WTMUser*)owner{
	_owner=owner;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	[dictionary setValue:self.category forKey:@"category"];
	[dictionary setValue:self.comment forKey:@"comment"];
	[dictionary setValue:self.extras forKey:@"extras"];
	[dictionary setValue:self.objectName forKey:@"objectName"];
	[dictionary setValue:[NSNumber numberWithInteger:self.rights] forKey:@"rights"];
	if(self.group){
		if(includeChildren){
			[dictionary setValue:[self.group dictionaryRepresentationWithChildren:includeChildren] forKey:@"group"];
		}else{
			[dictionary setValue:[self.group aliasDictionaryRepresentation] forKey:@"group"];
		}
	}
	if(self.owner){
		if(includeChildren){
			[dictionary setValue:[self.owner dictionaryRepresentationWithChildren:includeChildren] forKey:@"owner"];
		}else{
			[dictionary setValue:[self.owner aliasDictionaryRepresentation] forKey:@"owner"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%i) :\n",@"WTMModel ",self.uinstID];
	[s appendFormat:@"category : %@\n",self.category];
	[s appendFormat:@"comment : %@\n",self.comment];
	[s appendFormat:@"extras : %@\n",self.extras];
	[s appendFormat:@"objectName : %@\n",self.objectName];
	[s appendFormat:@"rights : %@\n",[NSNumber numberWithInteger:self.rights]];
	[s appendFormat:@"group : %@\n",NSStringFromClass([self.group class])];
	[s appendFormat:@"owner : %@\n",NSStringFromClass([self.owner class])];
	return s;
}

@end
