// This file is part of "Watt"
// 
// "Watt" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "Watt" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "Watt"  If not, see <http://www.gnu.org/licenses/>
// 
//  WattRegistryFileMap.m
//  Watt
//
//  Generated by Flexions  
//  Copyright (c) 2013 Benoit Pereira da Silva All rights reserved.
 
#import "WattRegistryFileMap.h" 
#import "WattCollectionOfRegistryFile.h"

@implementation WattRegistryFileMap 

@synthesize registries=_registries;


#pragma  mark WattCopying

- (instancetype)wattCopyInRegistry:(WattRegistry*)destinationRegistry{
	WattRegistryFileMap *instance=[super wattCopyInRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_registries=[_registries instancebyCopyTo:destinationRegistry];
    return instance;
}

#pragma  mark WattExtraction

- (instancetype)wattExtractAndCopyToRegistry:(WattRegistry*)destinationRegistry{
	WattRegistryFileMap *instance=[super wattExtractAndCopyToRegistry:destinationRegistry];
	instance->_registry=destinationRegistry;
	instance->_registries=[_registries extractInstancebyCopyTo:destinationRegistry];
    return instance;
}




#pragma mark -


- (void)setValue:(id)value forKey:(NSString *)key {
	if ([key isEqualToString:@"a"]){
		[super setValue:[WattCollectionOfRegistryFile instanceFromDictionary:value inRegistry:_registry includeChildren:NO] forKey:@"a"];
	} else {
		[super setValue:value forKey:key];
	}
}

- (WattCollectionOfRegistryFile*)registries{
	if([_registries isAnAlias]){
		id o=[_registry objectWithUinstID:_registries.uinstID];
		if(o){
			_registries=o;
		}
	}
	return _registries;
}


- (WattCollectionOfRegistryFile*)registries_auto{
	_registries=[self registries];
	if(!_registries){
		_registries=[[WattCollectionOfRegistryFile alloc] initInRegistry:_registry];
	}
	return _registries;
}

- (void)setRegistries:(WattCollectionOfRegistryFile*)registries{
	_registries=registries;
}


- (NSDictionary *)dictionaryRepresentationWithChildren:(BOOL)includeChildren{
	NSMutableDictionary *wrapper = [NSMutableDictionary dictionary];
	[wrapper setObject:NSStringFromClass([self class]) forKey:__className__];
    [wrapper setObject:[self dictionaryOfPropertiesWithChildren:includeChildren] forKey:__properties__];
    [wrapper setObject:[NSNumber numberWithInteger:self.uinstID] forKey:__uinstID__];
    return wrapper;
}

- (NSMutableDictionary*)dictionaryOfPropertiesWithChildren:(BOOL)includeChildren{
    NSMutableDictionary *dictionary=[super dictionaryOfPropertiesWithChildren:includeChildren];
	if(_registries){
		if(includeChildren){
			[dictionary setValue:[self.registries dictionaryRepresentationWithChildren:includeChildren] forKey:@"a"];
		}else{
			[dictionary setValue:[self.registries aliasDictionaryRepresentation] forKey:@"a"];
		}
	}
    return dictionary;
}


- (NSString*)description{
    if([self isAnAlias])
        return [super aliasDescription];
    NSMutableString *s=[NSMutableString stringWithString:[super description]];
	[s appendFormat:@"Instance of %@ (%i) :\n",@"WattRegistryFileMap ",self.uinstID];
	[s appendFormat:@"registries : %@\n",NSStringFromClass([self.registries class])];
	return s;
}

@end
